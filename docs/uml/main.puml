@startuml "TurretDefense"

package "System" {
    class GameManager {
        + waveNumber : int
        + lives : int
        + gold : int
        + leaderboard : Leaderboard
        + StartGame()
        + EndGame()
        + UpdateWave()
        + AddGold(amount : int)
        + LoseLife()
    }

    class Leaderboard {
        + scores : List<Score>
        + AddScore(playerName : string, waveNumber : int)
        + GetTopScores() : List<Score>
    }

    class Score {
        + playerName : string
        + wave : int
        + AddScore():void
    }

    GameManager --> Leaderboard
}

package "Building" {
    package "AttackStrategies" {
        interface IAttackStrategy {
            + ExecuteAttack(Turret : Turret, enemies : List<Enemy>)
        }

        class SingleTargetStrategy implements IAttackStrategy {
            + ExecuteAttack(Turret : Turret, enemies : List<Enemy>)
        }

        class AoeStrategy implements IAttackStrategy {
            + ExecuteAttack(Turret : Turret, enemies : List<Enemy>)
        }
    }

    class buildManager {
        - defenseToBuild : DefenseClass
        - selectedNode : NodeScript
        + selectUI : SelectUIScript

        + start(): void
        + GetDefenseToBuild(): DefenseClass
        + CanBuild(): bool
        + SelectNode(NodeScript node): void
        + DeselectNode() : void
        + SelectDefenseToBuild(DefenseClass _defense) : void
        + BuildDefenseOn(NodeScript node, bool activate, bool isUpgrade) : void 
    }

    class Turret {
        - target : Transform
        + maximumRange : float
        + minimumRange : float
        + turningSpeed : float
        + damage : float
        + fireRate : float
        + fireCountdown : float 

        - prefab : GameObject

        //TO DO
        + level : int
        + cost : int
        + effect : EffectType
        + attackStrategy : IAttackStrategy
        + Upgrade()
        + Shoot(enemies : List<Enemy>)
    }

    class Sniper extends Turret {
        + Shoot(enemies : List<Enemy>)
    }

    class Mortier extends Turret {
        + Shoot(enemies : List<Enemy>)
    }

    enum EffectType {
        Ralenti,
        Brulure
    }

    Turret --* AttackStrategies.IAttackStrategy : Strategy
}

package "Enemy" {
    abstract class Enemy {
        + health : float
        + speed : float
        + dammage : float
        + type : EnemyType 
        + position : Vector3
        + TakeDamage(amount : float)
        + ApplyEffect(effect : EffectType)
        + Move()
    }

    class zombie extends Enemy {}


    enum EnemyType {
        Feu,
        Glace
    }

    class EnemySpawner {
        + waveCount : int
        + SpawnWave(waveNumber : int) : List<Enemy>
    }
}

package "Map" {
    class Map {
        + Nodes : List<Node>
        + GetPath(start : Vector3, end : Vector3) : List<Vector3>
        + IsValidPosition(position : Vector3) : bool
        + PlaceTurret(position : Vector3, Turret : Turret)
    }

    class Node {
        + position : Vector3
        + isWalkable : bool
        + isOccupied : bool

        - rend : Renderer 
        + hoverMaterial : Material
        - defaultMaterial : Material
        + defense : GameObject 
        + tempDefense : GameObject 
        + buildManager : BuildManager
    }

    class BuildManager {
        - DefenseTobuild : Turret

        + GetDefenseToBuild() : GameObject
        + SelectDefenseToBuild()
    }

    Map --> Node
}

GameManager --> "1..*" Building.Turret
GameManager --> "1..*" Enemy.Enemy
GameManager --> "1" Map.Map

Building.Turret --> Map.Map : Uses
Enemy.Enemy --> Map.Map : Uses
EnemySpawner --> Enemy.Enemy : Creates