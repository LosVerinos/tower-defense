@startuml

class PlayerStats {
    + static int Money
    + int startMoney = 400
    + int startLives = 1
    + static int moneyMultiplier = 1
    + static float fireRateMultiplier = 1
    + static int Lives
    + static int PassedWaves = 0
    + static int NbKilledEnemies = 0
    + static int BuiltDefenses = 0
    + static float DamagesGiven = 0f
    + static int MoneySpent = 0

    + void Start()
    + static void ResetStats()
    + static void DecreaseLives(int _lives)
    + static void IncreaseLives(int _lives)
    + static void DecreaseMoney(int _money)
    + static void IncreaseMoney(int _money)
    + static void EnemyKilled()
    + static void WaveCompleted()
    + static void DefenseBuilt()
    + static void AddDamage(float damage)
}

abstract class Effect {
    - bool isActive = false
    - Node node

    + void ApplyEffect(Node _node)
    + void RemoveEffect()
}

class AirStrikeEffect {
    + GameObject obusPrefab
    + float spawnHeight = 20f
    - float delayBeforeDrop = 5f
    + GameObject targetObject
    + float spawnRadius = 15f

    + void ApplyEffect(Node _node)
    - void DropObus()
    - IEnumerator ReleaseNode()
}

AirStrikeEffect --|> Effect


class BonusShopScript {
    + int surplusCost = 50
    + int richZombieCost = 75
    + float bonusDuration = 10f

    + void BuySurplusAmmo()
    - IEnumerator ActivateSurplusAmmo()
    + void BuyRichZombie()
    - IEnumerator ActivateRichZombie()
}


class BuildManager {
    - static BuildManager instance
    - Defense defenseToBuild
    - Node selectedNode
    + SelectUIScript selectUI

    + void Awake()
    + void Start()
    + BuildManager GetInstance()
    + Defense GetDefenseToBuild()
    + bool CanBuild
    + void SelectNode(Node node)
    + void DeselectNode()
    + void SelectDefenseToBuild(Defense _defense)
    + void BuildDefenseOn(Node node, bool activate, bool isUpgrade)
}


class CameraControllerScript {
    + float panSpeed = 30f
    + float panBorderThickness = 10f
    + float scrollSpeed = 5000f
    - float yMin = 20f
    - float yMax = 95f
    - float zMin
    - float zMax
    - float xMin
    - float xMax

    + void Start()
    + void Update()
    - float CalculateZMax(float cameraY)
    - float CalculateXMin(float cameraY)
    - float CalculateXMax(float cameraY)
}


class Defense {
    + string name
    + int upgradeLevel
    + List<DefenseUpgradeState> upgradeStates
    + Transform target
    + LayerMask ennemyLayer
    + Transform movingPartx
    + Transform movingParty
    + bool active

    + Defense()
    + void Shoot(Ennemy Target)
    + Transform findTarget()
    + int GetSellAmount()
}


class DefenseScript {
    - float currentHealth
    - Defense defenseData
    - float baseHealth
    + Image healthBar
    - Canvas canvas
    - CanvasGroup canvasGroup
    - Coroutine fadeCoroutine
    - float lastDamageTime

    + void Initialize(Defense data)
    + void TakeDamage(float amount)
    - void DestroyDefense()
    - IEnumerator StartFadeDelay()
    - IEnumerator FadeOutHealthBar()
}


class DefenseUpgradeState {
    + GameObject prefab
    + float maximumRange
    + float minimumRange
    + float damages
    + float fireRate
    + int cost
    + float health
    + float turningSpeed

    + DefenseUpgradeState()
}


class Node {
    - Renderer rend
    + Material hoverMaterial
    - Material defaultMaterial
    + GameObject defense
    + GameObject tempDefense
    + Defense defenseClass
    + Vector3 positionOffset
    - BuildManager buildManager
    + int currentUpgradeState = 0
    + bool isUpgraded = false

    + void Start()
    + void OnMouseEnter()
    + void OnMouseExit()
    + void SetHover(bool state)
    + void OnMouseDown()
    - bool IsPointerOverUIElement()
    + void UpgradeDefense()
    + void SellDefense()
}

class EnemyBase {
    - baseHealth : float
    - reward : int
    - damage : int
    - difficultyWeight : float
    - isDead : bool
    - health : float
    - healthBar : Image
    - canvas : Canvas
    - agent : NavMeshAgent
    + Start() : void
    + Update() : void
    + TakeDamages(damages : float) : void
    + Die() : void
}

class ExplosiveZombie {
    - explosionRadius : float
    - explosionDamage : float
    - explosionEffect : GameObject
    + Die() : void
    - Explode() : void
    - CalculateDamageMultiplier(distance : float) : float
}

class FlyingEnemyNavigationScript {
    - objectivePoint : Transform
    - speed : float
    - flightHeight : float
    - smoothRotationSpeed : float
    - velocity : Vector3
    + Start() : void
    + Update() : void
    - OnReachedDestination() : void
    - MoveTowardsTarget() : void
}

class GameManager {
    - gameOverPanel : GameObject
    + isRunning : bool
    + Start() : void
    + Update() : void
    - EndGame() : void
    + PauseGame() : void
    + StartGame() : void
}

class GameOverPanelScript {
    - stats : StatsUIScript
    - mainMenuUI : GameObject
    - rankingText : TextMeshProUGUI
    + OnRestartButtonClick() : void
    + Activate(activate : bool) : void
    + Menu() : void
    - UpdateRankingDisplay() : void
}

class LivesUIScript {
    - livesText : TextMeshProUGUI
    + Start() : void
    + Update() : void
}

class MainMenu {
    - ui : GameObject
    - rankingText : TextMeshProUGUI
    - playerNameInput : TMP_InputField
    - playerName : string
    + Start() : void
    + StartButton() : void
    + Quit() : void
    - DisplayRanking() : void
}

class MoneyUIScript {
    - moneyText : TextMeshProUGUI
    + Start() : void
    + Update() : void
}

class ObusScript {
    - target : Transform
    - speed : float
    - bulletImpact : GameObject
    - damagesRadius : float
    - damages : float
    - destination : Vector3
    - startPosition : Vector3
    - flightTime : float
    - elapsedTime : float
    - arcHeight : float
    - previousPosition : Vector3
    - aerialLaunch : bool
    + Find(target : Transform) : void
    + SetDamage(damages : float) : void
    + Update() : void
    - Explode() : void
    - CalculateDamageMultiplier(distance : float) : float
    - Damage(colliderTransform : Transform, damagesTaken : float) : void
    + SetAerialLaunch(aerialLaunch : bool) : void
    + SetSpeed(newSpeed : float) : void
}

class PauseMenu {
    - ui : GameObject
    - mainMenuUI : GameObject
    + Update() : void
    + Toggle() : void
    + Retry() : void
    + Menu() : void
}

class RankingSystem {
    + LoadScores() : ScoreList
    + SaveScores(scoreList : ScoreList) : void
    + AddNewScore(playerName : string, newScore : int) : void
}

class SelectUIScript {
    - target : Node
    - ui : GameObject
    + SetTarget(target : Node) : void
    + Hide() : void
    + Upgrade() : void
    + Sell() : void
}

class ShopScript {
    - object1 : Defense
    - object2 : Defense
    - object3 : Defense
    - object4 : Defense
    - buildManager : BuildManager
    - shopButtonObject1 : Button
    - shopButtonObject2 : Button
    - shopButtonObject3 : Button
    - shopButtonObject4 : Button
    + SelectObject1() : void
    + SelectObject2() : void
    + SelectObject3() : void
    + SelectObject4() : void
    + Start() : void
    + Update() : void
}

class ShopUIScript {
    - defensesButton : GameObject
    - supportButton : GameObject
    - bonusButton : GameObject
    - closeButton : GameObject
    - currentPanel : GameObject
    - isPanelDeployed : bool
    + DeployPanel(panel : GameObject) : void
    + ShrinkOtherPanels() : void
    + ShrinkAll() : void
    + MovePanels(panels : GameObject[], movement : Vector3) : void
}

class SlowEffect {
    + ApplyEffect(_node : Node) : void
    + OnTriggerEnter(otherCollider : Collider) : void
    + OnTriggerExit(otherCollider : Collider) : void
    + ApplyEffectSpeed(collider : Transform, speedMultiplier : float) : void
}

class SpecialWaveFactory {
    + CreateWave(waveNumber : int) : Wave
}

class StandardWaveFactory {
    + CreateWave(waveNumber : int) : Wave
    + CalculateZombiesForWave(waveNumber : int) : int
}

class StatsUIScript {
    - statsText : TextMeshProUGUI
    + DisplayStats() : void
}

class TurretScript {
    - target : Transform
    - maximumRange : float
    - minimumRange : float
    - turningSpeed : float
    - damages : float
    - fireRate : float
    - fireCountdown : float
    - enemyLayer : LayerMask
    - movingPartY : Transform
    - movingPartX : Transform
    - bulletPrefab : GameObject
    - firePoint : Transform
    - muzzleFlash : GameObject
    - defaultRotationX : Quaternion
    - defaultRotationY : Quaternion
    - active : bool
    + Start() : void
    + Initialize() : void
    + UpdateTarget() : bool
    + Update() : void
    + Shoot() : void
    + SetActive(active : bool) : void
}

class Wave {
    - count : int
    - zombieRatios : Dictionary<int, float>
    - isSpecialWave : bool
    - specialWaveType : string
    - bossCount : int
}

class WaveBuilder {
    - wave : Wave
    + WaveBuilder(waveNumber : int)
    + DoubleWaveCount() : WaveBuilder
    + AddZombieType(type : int, ratio : float) : WaveBuilder
    + SetSpecialWave(type : string) : WaveBuilder
    + SetBossCount(waveNumber : int) : WaveBuilder
    + Build() : Wave
    + CalculateZombiesForWave(waveNumber : int) : int
}

abstract class WaveFactory {
    + CreateWave(waveNumber : int) : Wave
}

class WaveSpawner {
    - Instance : WaveSpawner
    - EnemiesAliveCount : int
    - spawnPoint : Transform
    - alternativeSpawnPoint : Transform
    - altSpawnProbability : float
    - generatedWaves : List<Wave>
    - waveIndex : int
    + Start() : void
    + Update() : void
    + SpawnWave() : IEnumerator
    + EnemyDied() : void
    + EnemySpawned() : void
    + ResetEnemiesAliveCount() : void
    + GenerateNextWave() : void
    + CalculateZombiesForWave(waveNumber : int) : int
    + ResetWaveSpawner() : void
}

class WaveUIScript {
    - waveText : TextMeshProUGUI
    - waveManager : WaveSpawner
    + Start() : void
    + Update() : void
}

class ZombieFactory {
    - enemyHealthMultiplier : float
    - enemySpeedMultiplier : float
    - defaultObjectivePoint : Transform
    - zombies : GameObject[]
    + SpawnZombie(waveNumber : int, selectedZombie : int, spawnLocation : Transform) : void
}

EnemyBase <|-- ExplosiveZombie
EnemyBase <-- FlyingEnemyNavigationScript
DefenseScript --> Defense
DefenseScript --> Image
DefenseScript --> Canvas
DefenseScript --> Coroutine
DefenseScript --> CanvasGroup
DefenseScript --> GameObject
DefenseScript --> Effect
Node --> Defense
NodeScript --> Node
NodeScript --> BuildManager
EnemyBase --> PlayerStats
EnemyBase --> WaveSpawner

PlayerStats --> BuildManager
BuildManager --> Defense
BuildManager --> Node
BuildManager --> SelectUIScript
BuildManager --> DefenseUpgradeState
AirStrikeEffect --> Node
BonusShopScript --> PlayerStats
GameManager --> GameOverPanelScript
GameOverPanelScript --> StatsUIScript
GameOverPanelScript --> PlayerStats
MainMenu --> GameManager
MainMenu --> RankingSystem
MainMenu --> PlayerPrefs
MoneyUIScript --> PlayerStats
LivesUIScript --> PlayerStats
ObusScript --> PlayerStats
PauseMenu --> GameManager
PauseMenu --> SceneManager
RankingSystem --> MainMenu
SelectUIScript --> Node
SelectUIScript --> BuildManager
ShopScript --> PlayerStats
ShopScript --> BuildManager
ShopScript --> Defense
ShopUIScript --> GameObject
ShopUIScript --> Vector3
SlowEffect --> Effect
SlowEffect --> Node
SlowEffect --> NavMeshAgent
SpecialWaveFactory --> WaveFactory
SpecialWaveFactory --> WaveBuilder
StandardWaveFactory --> WaveFactory
StandardWaveFactory --> WaveBuilder
StatsUIScript --> PlayerStats
StatsUIScript --> TextMeshProUGUI
TurretScript --> PlayerStats
TurretScript --> GameObject
TurretScript --> BulletScript
TurretScript --> ObusScript
WaveBuilder --> Wave
WaveBuilder --> WaveFactory
WaveFactory <|-- SpecialWaveFactory
WaveFactory <|-- StandardWaveFactory
WaveSpawner --> Wave
WaveSpawner --> ZombieFactory
WaveSpawner --> GameManager
WaveSpawner --> PlayerStats
WaveUIScript --> WaveSpawner
WaveUIScript --> TextMeshProUGUI
ZombieFactory --> WaveSpawner
ZombieFactory --> GameObject
ZombieFactory --> AINavigationScript
ZombieFactory --> FlyingEnemyNavigationScript

@enduml
