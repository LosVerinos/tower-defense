@startuml

class PlayerStats {
    + static int Money
    + int startMoney = 400
    + int startLives = 1
    + static int moneyMultiplier = 1
    + static float fireRateMultiplier = 1
    + static int Lives
    + static int PassedWaves = 0
    + static int NbKilledEnemies = 0
    + static int BuiltDefenses = 0
    + static float DamagesGiven = 0f
    + static int MoneySpent = 0

    + void Start()
    + static void ResetStats()
    + static void DecreaseLives(int _lives)
    + static void IncreaseLives(int _lives)
    + static void DecreaseMoney(int _money)
    + static void IncreaseMoney(int _money)
    + static void EnemyKilled()
    + static void WaveCompleted()
    + static void DefenseBuilt()
    + static void AddDamage(float damage)
}

abstract class Effect {
    - bool isActive = false
    - Node node

    + void ApplyEffect(Node _node)
    + void RemoveEffect()
}

class AirStrikeEffect {
    + GameObject obusPrefab
    + float spawnHeight = 20f
    - float delayBeforeDrop = 5f
    + GameObject targetObject
    + float spawnRadius = 15f

    + void ApplyEffect(Node _node)
    - void DropObus()
    - IEnumerator ReleaseNode()
}

AirStrikeEffect --|> Effect

class BonusShop {
    + int surplusCost = 50
    + int richZombieCost = 75
    + float bonusDuration = 10f

    + void BuySurplusAmmo()
    - IEnumerator ActivateSurplusAmmo()
    + void BuyRichZombie()
    - IEnumerator ActivateRichZombie()
}

class BuildManager {
    - static BuildManager instance
    - Defense defenseToBuild
    - Node selectedNode
    + SelectUI selectUI

    + void Awake()
    + void Start()
    + BuildManager GetInstance()
    + Defense GetDefenseToBuild()
    + bool CanBuild
    + void SelectNode(Node node)
    + void DeselectNode()
    + void SelectDefenseToBuild(Defense _defense)
    + void BuildDefenseOn(Node node, bool activate, bool isUpgrade)
}

class CameraController {
    + float panSpeed = 30f
    + float panBorderThickness = 10f
    + float scrollSpeed = 5000f
    - float yMin = 20f
    - float yMax = 95f
    - float zMin
    - float zMax
    - float xMin
    - float xMax

    + void Start()
    + void Update()
    - float CalculateZMax(float cameraY)
    - float CalculateXMin(float cameraY)
    - float CalculateXMax(float cameraY)
}

class Defense {
    + string name
    + int upgradeLevel
    + List<DefenseUpgradeState> upgradeStates
    + Transform target
    + LayerMask ennemyLayer
    + Transform movingPartx
    + Transform movingParty
    + bool active

    + Defense()
    + void Shoot(Ennemy Target)
    + Transform findTarget()
    + int GetSellAmount()
}

class Defense {
    - float currentHealth
    - Defense defenseData
    - float baseHealth
    + Image healthBar
    - Canvas canvas
    - CanvasGroup canvasGroup
    - Coroutine fadeCoroutine
    - float lastDamageTime

    + void Initialize(Defense data)
    + void TakeDamage(float amount)
    - void DestroyDefense()
    - IEnumerator StartFadeDelay()
    - IEnumerator FadeOutHealthBar()
}

class DefenseUpgradeState {
    + GameObject prefab
    + float maximumRange
    + float minimumRange
    + float damages
    + float fireRate
    + int cost
    + float health
    + float turningSpeed

    + DefenseUpgradeState()
}

class Node {
    - Renderer rend
    + Material hoverMaterial
    - Material defaultMaterial
    + GameObject defense
    + GameObject tempDefense
    + Defense defenseClass
    + Vector3 positionOffset
    - BuildManager buildManager
    + int currentUpgradeState = 0
    + bool isUpgraded = false

    + void Start()
    + void OnMouseEnter()
    + void OnMouseExit()
    + void SetHover(bool state)
    + void OnMouseDown()
    - bool IsPointerOverUIElement()
    + void UpgradeDefense()
    + void SellDefense()
}

class EnemyBase {
    - baseHealth : float
    + index : int
    + strategyNavigation : Navigation
    - reward : int
    - damage : int
    - difficultyWeight : float
    - isDead : bool
    - health : float
    - healthBar : Image
    - canvas : Canvas
    - agent : NavMeshAgent
    + Start() : void
    + Update() : void
    + TakeDamages(damages : float) : void
    + Die() : void
}

class ExplosiveZombie {
    +float explosionRadius = 10f
    +float explosionDamage = 2000f
    +GameObject explosionEffect
    +void Die()
    -void Explode()
    -float CalculateDamageMultiplier(float distance)
}

class ClassicZombie {
    + Die() : void
}
class FastZombie {
    + Die() : void
}

class HeavyZombie {
    + Die() : void
}

class CrowZombie {
    + Die() : void
}

abstract class Zombie {
    + Die() : void
}

abstract class FlyingZombie {
    + Die() : void
}

class FlyingEnemyNavigation {
    +Transform objectivePoint
    +float speed = 5f
    -float flightHeight = 10.5f
    -float smoothRotationSpeed = 5f
    -Vector3 velocity = Vector3.zero
    -void OnReachedDestination()
    -void MoveTowardsTarget()
}

class AINavigation{
        + Transform objectivePoint;
        + NavMeshAgent agent;
        + OnReachedDestination() : void 
}

class Navigation{
        + Transform objectivePoint;
        + float speed;
        + OnReachedDestination() : void 
}

Interface INavigation {
    + void OnReachedDestination()
}   

class GameManager {
    -GameObject gameOverPanel
    +static bool isRunning = false
    
    
    -void EndGame()
    +static void PauseGame()
    +static void StartGame()
}

class GameOverPanel {
    -StatsUI stats
    +GameObject mainMenuUI
    +TextMeshProUGUI rankingText
    +void OnRestartButtonClick()
    +void Activate(bool activate)
    +void Menu()
    -void UpdateRankingDisplay()
}

class LivesUI {
    +TextMeshProUGUI livesText
    
    
}

class MainMenu {
    +GameObject ui
    +TextMeshProUGUI rankingText
    +TMP_InputField playerNameInput
    -string playerName = "Player"
    
    +void StartButton()
    +void Quit()
    -void DisplayRanking()
}

class MoneyUI {
    +TextMeshProUGUI moneyText
    
    
}

abstract class Projectile {
    #Transform target
    +float speed = 70f
    +GameObject bulletImpact
    #float damages
    +void Find(Transform _target)
    +void SetDamage(float _damages)
    #abstract void Update()
    #void Damage(Transform colliderTransform, float damagesTaken)
}

class Obus {
    +float damagesRadius
    -Vector3 destination
    -Vector3 startPosition
    -float flightTime
    -float elapsedTime
    +float arcHeight
    -Vector3 previousPosition
    -bool aerialLaunch = false
    +void Find(Transform _target)
    #void Update()
    -void Explode()
    -float CalculateDamageMultiplier(float distance)
    +void SetAerialLaunch(bool _aerialLaunch)
    +void SetSpeed(float _newSpeed)
}

class Bullet {
    #void Update()
    -void HitTarget()
}

class PauseMenu {
    +GameObject ui
    +GameObject mainMenuUI
    
    +void Toggle()
    +void Retry()
    +void Menu()
}

class RankingSystem {
        -string filePath
        -int maxEntries = 5
        +class ScoreEntry {
            +string playerName
            +int score
        +static ScoreList LoadScores()
        +static void SaveScores(ScoreList scoreList)
        +static void AddNewScore(string playerName, int newScore)
}

class ScoreList {
    +List<ScoreEntry> scores = new List<ScoreEntry>()
}

class SelectUI {
    -Node target
    +bool isDeployed
    +GameObject ui
    +TextMeshProUGUI defenseNameText
    +TextMeshProUGUI levelText
    +TextMeshProUGUI damageText
    +TextMeshProUGUI rangeText
    +TextMeshProUGUI fireRateText
    +Button upgradeButton
    +Button sellButton
    +GameObject generalUI
    +void SetTarget(Node _target)
    +void Hide()
    +void Upgrade()
    +void Sell()
    +void Display()
    -void UpdateUI()
    -void CheckButtonActivation()
}

class Shop {
    +Defense object1
    +Defense object2
    +Defense object3
    +Defense object4
    -BuildManager buildManager
    +Button shopButtonObject1
    +Button shopButtonObject2
    +Button shopButtonObject3
    +Button shopButtonObject4
    +void SelectObject1()
    +void SelectObject2()
    +void SelectObject3()
    +void SelectObject4()
    -void DisableButton(Button button)
    -void EnableButton(Button button)
    
    
}

class ShopUI {
    -GameObject defensesButton
    -GameObject supportButton
    -GameObject bonusButton
    -GameObject closeButton
    -GameObject currentPanel
    -bool isPanelDeployed = false
    +GameObject selectUI
    
    +void DeployPanel(GameObject panel)
    -void ShrinkOtherPanels()
    +void ShrinkAll()
    -void MovePanels(GameObject[] panels, Vector3 movement)
}

class SlowEffect {
    +void ApplyEffect(Node _node)
    -void OnTriggerEnter(Collider otherCollider)
    -void OnTriggerExit(Collider otherCollider)
    -void ApplyEffectSpeed(Transform collider, float speedMultiplier)
}

class SpecialWaveFactory {
    +Wave CreateWave(int waveNumber)
}

class StandardWaveFactory {
    +Wave CreateWave(int waveNumber)
    -int CalculateZombiesForWave(int waveNumber)
}

class StatsUI {
    +TextMeshProUGUI statsText
    +void DisplayStats()
}

class Turret {
        -Transform target
        +float maximumRange = 15f
        +float minimumRange = 0f
        +float turningSpeed = 10f
        +float damages
        +float fireRate
        -float fireCountdown
        +LayerMask enemyLayer
        +Transform movingPartY
        +Transform movingPartX
        +GameObject bulletPrefab
        +Transform firePoint
        +GameObject muzzleFlash
        -Quaternion defaultRotationX
        -Quaternion defaultRotationY
        -bool active = false
        
        +void Initialize()
        -bool UpdateTarget()
        
        -void Shoot()
        +void SetActive(bool _active)
    }

    class Wave {
        +int count
        +Dictionary<int, float> zombieRatios
        +bool isSpecialWave = false
        +string specialWaveType = ""
        +int bossCount = 0
    }

    class WaveBuilder {
        -Wave wave
        +WaveBuilder(int waveNumber)
        +WaveBuilder DoubleWaveCount()
        +WaveBuilder AddZombieType(int type, float ratio)
        +WaveBuilder SetSpecialWave(string type)
        +WaveBuilder SetBossCount(int waveNumber)
        +Wave Build()
        +int CalculateZombiesForWave(int waveNumber)
    }

    abstract class WaveFactory {
        +abstract Wave CreateWave(int waveNumber)
    }

    class WaveSpawner {
        +static WaveSpawner Instance
        +static int EnemiesAliveCount = 0
        +Transform spawnPoint
        +Transform alternativeSpawnPoint
        -float altSpawnProbability = 0.3f
        -List<Wave> generatedWaves
        +static int waveIndex = 0
        -void Awake()
        
        
        -IEnumerator SpawnWave()
        +static void EnemyDied()
        +static void EnemySpawned()
        -static void ResetEnemiesAliveCount()
        -void GenerateNextWave()
        +int CalculateZombiesForWave(int waveNumber)
        -void ResetWaveSpawner()
    }

    class WaveUI {
        +TextMeshProUGUI waveText
        +WaveSpawner waveManager
        
        
    }

    class ZombieFactory {
        -static float enemyHealthMultiplier = 1.1f
        -static float enemySpeedMultiplier = 1.05f
        +Transform defaultObjectivePoint
        +GameObject[] zombies
        +void SpawnZombie(int waveNumber, int selectedZombie, Transform spawnLocation)
    }

EnemyBase <-- FlyingEnemyNavigation
Defense --> Effect
Node --> Defense
EnemyBase --> PlayerStats
EnemyBase --> WaveSpawner

PlayerStats --> BuildManager
BuildManager --> Defense
BuildManager --> Node
BuildManager --> SelectUI
BuildManager --> DefenseUpgradeState
AirStrikeEffect --> Node
BonusShop --> PlayerStats
GameManager --> GameOverPanel
GameOverPanel --> StatsUI
GameOverPanel --> PlayerStats
MainMenu --> GameManager
MoneyUI --> PlayerStats
LivesUI --> PlayerStats
Projectile <|-- Obus
Projectile <|-- Bullet
PauseMenu --> GameManager
RankingSystem --> MainMenu
SelectUI --> Node
Shop --> PlayerStats
Shop --> BuildManager
Shop --> Defense
SlowEffect --> Effect
SlowEffect --> Node
SpecialWaveFactory --> WaveBuilder
StandardWaveFactory --> WaveBuilder
StatsUI --> PlayerStats
Turret --> PlayerStats
Turret --> Bullet
Turret --> Obus
WaveBuilder --> Wave
WaveBuilder --> WaveFactory
WaveFactory <|-- SpecialWaveFactory
WaveFactory <|-- StandardWaveFactory
WaveSpawner --> Wave
WaveSpawner --> GameManager
WaveSpawner --> PlayerStats
WaveUI --> WaveSpawner
ZombieFactory --> WaveSpawner
ZombieFactory --> FlyingEnemyNavigation
ZombieFactory --> AINavigation
FlyingZombie --|> EnemyBase
Zombie --|> EnemyBase
ExplosiveZombie --|> Zombie
ClassicZombie --|> Zombie
CrowZombie --|> FlyingZombie
FastZombie --|> Zombie
HeavyZombie --|> Zombie
ScoreList --> RankingSystem
Navigation --|> INavigation
AINavigation --|> Navigation
FlyingEnemyNavigation --|> Navigation


@enduml
